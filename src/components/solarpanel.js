import React, { useRef, useEffect, Suspense, useMemo, useState } from 'react';
import { useGLTF, Html, Text } from '@react-three/drei';
import { TextureLoader, Color, ShaderMaterial, Vector3 } from 'three';
import { useFrame, extend } from '@react-three/fiber';
import WeatherPanel from './WeatherPanel';
import { fetchWeatherData, calculateEnergy } from './WeatherService';
import { updateEnvironment } from './EnvironmentController';
import CustomSky from './CustomSky';
// Function to fetch weather data from the API
// const fetchWeatherData = async (latitude, longitude) => {
//     const response = await fetch(`https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&current=is_day&hourly=temperature_2m,relative_humidity_2m,dew_point_2m,rain,shortwave_radiation&daily=weather_code&timezone=auto`);
//     const data = await response.json();
//     return data.hourly;
// };

// // Function to calculate energy generated by the solar panels
// const calculateEnergy = (radiation, efficiency, area) => {
//     return radiation * efficiency * area;
// };

const InputPanel = ({ position, onSubmit }) => {
    const [latitude, setLatitude] = useState('52.52');
    const [longitude, setLongitude] = useState('13.41');
    const [efficiency, setEfficiency] = useState('0.15');
    const [area, setArea] = useState('1.6');
    const [currentTime, setCurrentTime] = useState('');

    useEffect(() => {
        const timer = setInterval(() => {
            setCurrentTime(new Date().toLocaleTimeString());
        }, 1000);
        return () => clearInterval(timer);
    }, []);

    return (
        <group position={position}>
            <Html transform position={[0, 0, 0]} rotation={[0, 0, 0]} scale={1}>
                <div style={{ width: '400px', padding: '20px', backgroundColor: 'rgba(255, 255, 255, 0.8)', borderRadius: '10px' }}>
                    <h2>Solar Panel Configuration</h2>
                    <div>
                        <label>Latitude: </label>
                        <input type="text" value={latitude} onChange={(e) => setLatitude(e.target.value)} />
                    </div>
                    <div>
                        <label>Longitude: </label>
                        <input type="text" value={longitude} onChange={(e) => setLongitude(e.target.value)} />
                    </div>
                    <div>
                        <label>Efficiency: </label>
                        <input type="text" value={efficiency} onChange={(e) => setEfficiency(e.target.value)} />
                    </div>
                    <div>
                        <label>Area (mÂ²): </label>
                        <input type="text" value={area} onChange={(e) => setArea(e.target.value)} />
                    </div>
                    <button onClick={() => onSubmit({ latitude: parseFloat(latitude), longitude: parseFloat(longitude), efficiency: parseFloat(efficiency), area: parseFloat(area) })}>
                        Update
                    </button>
                    <p>Current Time: {currentTime}</p>
                </div>
            </Html>
        </group>
    );
};

const GroundPlane = ({ position }) => {
    const planeRef = useRef();

    useEffect(() => {
        const textureLoader = new TextureLoader();
        const texture = textureLoader.load('/coast_sand_rocks_02_diff_4k.jpg');

        planeRef.current.material.map = texture;
        planeRef.current.material.needsUpdate = true;
    }, []);

    return (
        <mesh receiveShadow position={position} rotation={[-Math.PI / 2, 0, 0]} ref={planeRef}>
            <planeGeometry args={[100, 100]} />
            <meshStandardMaterial />
        </mesh>
    );
};

const SolarPanel = ({ position, id, onClick, energy }) => {
    const { scene } = useGLTF('/panel.glb');
    const panelRef = useRef();

    useEffect(() => {
        const clone = scene.clone();
        panelRef.current.add(clone);
    }, [scene]);

    return (
        <group
            ref={panelRef}
            position={position}
            onClick={(e) => {
                e.stopPropagation();
                onClick(id,energy);
            }}
        />
    );
};


const SolarPanelWrapper = () => {
    const [selectedPanel, setSelectedPanel] = useState(null);
    const [selectedPanelEnergy, setSelectedPanelEnergy] = useState(null);
    const [weatherData, setWeatherData] = useState(null);
    const [currentEnergy, setCurrentEnergy] = useState(0);
    const [panels, setPanels] = useState([]);
    const [localTime, setLocalTime] = useState('');

    const [panelConfig, setPanelConfig] = useState({
        latitude: 52.52,
        longitude: 13.41,
        efficiency: 0.15,
        area: 1.6
    });

    useEffect(() => {
        const fetchData = async () => {
            try {
                const data = await fetchWeatherData(panelConfig.latitude, panelConfig.longitude);
                setWeatherData(data);
                const energy = calculateEnergy(data.ghi, panelConfig.efficiency, panelConfig.area);
                setCurrentEnergy(energy);
                updateEnvironment( data.weatherCode, data.time);
                setLocalTime(weatherData.localTime);
            } catch (error) {
                console.error('Error fetching weather data:', error);
            }
        };

        fetchData();
        const interval = setInterval(fetchData, 3600000); 
        return () => clearInterval(interval);
    }, [panelConfig]);

    useEffect(() => {
        const rows = 4;
        const cols = 5;
        const spacing = 3.5; // Adjust spacing between panels

        const newPanels = [];
        for (let row = 0; row < rows; row++) {
            for (let col = 0; col < cols; col++) {
                const id = `${row}-${col}`;
                newPanels.push(
                    <SolarPanel
                        key={id}
                        id={id}
                        position={[col * spacing * 2, 0, row * spacing]}
                        onClick={(id) => {
                            setSelectedPanel(id);
                            setSelectedPanelEnergy(currentEnergy);
                        }}
                        energy={currentEnergy}
                         localTime={localTime}
                    />
                );
            }
        }
        setPanels(newPanels);
    }, [currentEnergy]);

    const handleConfigUpdate = (newConfig) => {
        setPanelConfig(newConfig);
    };

    return (
        <Suspense fallback={null}>
           

            <ambientLight intensity={0.2} />

            {panels}

            <GroundPlane position={[0, -0.05, 0]} />

            <InputPanel position={[0, 5, -10]} onSubmit={handleConfigUpdate} />
            
            {weatherData && (
                <WeatherPanel position={[-12, 5, -10]} weatherData={weatherData} />
            )}

            {weatherData && (
                <CustomSky time={weatherData.time} />
            )}

            {selectedPanel && (
                <Html>
                    <div style={{ position: 'absolute', top: '10px', left: '10px', padding: '10px', backgroundColor: 'white',width:'200px' }}>
                        <h2>Panel Details</h2>
                        <p>Selected Panel ID: {selectedPanel}</p>
                        <p>Energy Generated: {selectedPanelEnergy !== null ? selectedPanelEnergy.toFixed(2) : 'N/A'} W</p>
                        <button onClick={() => {
                            setSelectedPanel(null);
                            setSelectedPanelEnergy(null);
                        }}>Close</button>
                    </div>
                </Html>
            )}
        </Suspense>
    );
};

export default SolarPanelWrapper;